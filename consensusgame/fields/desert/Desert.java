package game.consensusgame.fields.desert;

import game.consensusgame.fields.Field;

public class Desert implements Field{
	//フィールド宣言
	//アイテム(正解順)
	private String[] answerItems = {"化粧用の鏡", "１人１着の軽装コート", "１人につき１リットルの水", "懐中電灯（乾電池が４つ入ってる）", 
			"赤と白のパラシュート", "大きいビニールの雨具", "弾薬の装填されている４５口径のピストル", "磁石の羅針盤", "この地域の航空写真の地図",
			"「食用に適する砂漠の動物」という本", "約２リットルのウォッカ", "ガラス瓶に入っている食塩（１０００錠）"};

	//テストコード
	//private String[] answerItems = {"1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12"};

	//解説(正解順)
	private String[] reason = {"鏡はかなり遠距離まで光が届き、捜索隊への信号になる。", "太陽光線を浴びないようにする。夜の寒さよけにもなる。", 
			"生存には不可欠。", "夜の救助に光を使って知らせる。", "広げると空からの目印になる。", "砂嵐から身を守るために必要。", 
			"射撃音で知らせることができる。動物に襲われそうになったら射殺する。", "町に向かう為のアイテム。捜索隊に早期発見されるためには役に立たない。", 
			"砂漠は目印がなく、現在地の特定が難しい。",	"動物を捕まえると体力を消耗する", "余計に喉が渇き、脱水症状になる。", 
	"塩を摂取すると血液濃度が上がる。喉が渇き、脱水症状を促進してしまう。"};

	//状況説明の内容
	private String explanation  = "７月中旬のある日、午前10時ごろ、あなた方が乗った小型飛行機は、アメリカ合衆国の南西部にある砂漠の中に不時着しました。\n"
			+ "不時着した際、飛行機は大破炎上、操縦士と副操縦士は焼死しましたが、あなた方は奇跡的に大きな怪我もなく無事でした。\n"
			+ "不時着はあまりに突然で、無線で救援を求める時間もなく、また現在位置を知らせる時間もありませんでした。\n"
			+ "しかし、不時着する前に見た周りの景色から、あなた方は飛行プランに示されているコースから約１００km離れた所にいることがわかっていました。\n"
			+ "また、操縦士は不時着前に、最も近くの居住地は約１１０km南南西にあることだけをあなた方に告げていました。\n"
			+ "この付近は全く平坦で、サボテンが生えている他は不毛の地域です。不時着直前の天気予報では、気温は約43℃になるだろうと言っています。\n"
			+ "それは、地表に近い足もとでは50℃にもなるだろうことを意味しています。\n"
			+ "あなた方は、軽装〜半袖シャツ、ズボン、靴下、タウンシューズという服装で、各々、1枚のハンカチとサングラスを持っています。\n"
			+ "また、全員で8ドルばかりの小銭と100ドルの紙幣、１箱のタバコとボールペンが１本あるのみです。\n"
			+ "ただ飛行機が燃えてしまう前に、あなた方は次の" + answerItems.length + "の品物をかろうじて取り出すことができました。\n"
			+ "これらのアイテムの中で生存に必要なものは何か、優先順位をつけてください。";

	//スコア記録用のテキストファイルの相対パス
	private String passname = "games/game/consensusgame/fields/desert/DesertRecord";

	//メソッド宣言	
	//状況のフィールドを与えるメソッド
	@Override
	public String getExplanation() {
		return explanation;
	}
	//配列の要素を与えるメソッド
	@Override
	public String getAnswerItems(int i) {
		return answerItems[i];
	}
	//配列の長さを与えるメソッド
	@Override
	public int getLength() {
		return answerItems.length;
	}
	//配列の要素(正解)を与えるメソッド
	@Override
	public String getItem(int i) {
		return answerItems[i];
	}
	//配列の要素(理由)を与えるメソッド
	@Override
	public String getreason(int i) {
		return reason[i];
	}
	//スコア記録ファイルのパスを返すメソッド
	@Override
	public String getPass() {
		return passname;
	}
}
